#account admin: admin,admin123
import tkinter as tk
from tkinter import ttk, messagebox
import json
import os
from PIL import Image, ImageTk, UnidentifiedImageError
import requests
from bs4 import BeautifulSoup
from tkinterweb import HtmlFrame
import webbrowser
from movie_crawler import MotphimCrawler
import threading
import re
from utils import slugify_title



class MovieApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Movie Streaming Application")
        self.root.geometry("800x500")
        self.root.resizable(True, True)  # Cho ph√©p thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï

        # Th√™m menu fullscreen
        self.is_fullscreen = False
        self.root.bind("<F11>", self.toggle_fullscreen)
        self.root.bind("<Escape>", self.exit_fullscreen)

        window_width = 800
        window_height = 500
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        root.configure(bg="white")
        root.title("Movie Streaming App")
        style = ttk.Style()
        style.theme_use('default')
        style.configure("TFrame", background="white")
        style.configure("TLabel", background="white")
        style.configure("TCheckbutton", background="white")
        self.in_favorites_view = False
        # Kh·ªüi t·∫°o d·ªØ li·ªáu
        self.movies = []
        self.users = []
        self.current_user = None
        
        # T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
        self.create_directories()
        
        # Load d·ªØ li·ªáu
        self.load_data()
        
        # T·∫°o giao di·ªán ƒëƒÉng nh·∫≠p
        self.show_login_screen()

    def create_directories(self):
        """T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt cho ·ª©ng d·ª•ng"""
        directories = ['data', 'images', 'movies']
        for directory in directories:
            if not os.path.exists(directory):
                os.makedirs(directory)
    
    def load_data(self):
        """Load d·ªØ li·ªáu t·ª´ file JSON"""
        try:
            with open('data/movies.json', 'r', encoding='utf-8') as f:
                self.movies = json.load(f)
        except FileNotFoundError:
            self.movies = []
            
        try:
            with open('data/users.json', 'r', encoding='utf-8') as f:
                self.users = json.load(f)
        except FileNotFoundError:
            self.users = []
        print("S·ªë l∆∞·ª£ng phim ƒë∆∞·ª£c t·∫£i: ", len(self.movies))
    
    def save_data(self):
        """L∆∞u d·ªØ li·ªáu v√†o file JSON"""
        with open('data/movies.json', 'w', encoding='utf-8') as f:
            json.dump(self.movies, f, indent=4, ensure_ascii=False)
            
        with open('data/users.json', 'w', encoding='utf-8') as f:
            json.dump(self.users, f, indent=4, ensure_ascii=False)

    def create_left_panel(self, parent):
        frame = tk.Frame(parent, width=400, height=400, bg="white")
        frame.pack(side=tk.LEFT, padx=(50, 10), pady=30)
        frame.pack_propagate(False)

        tk.Label(frame, text="üé¨ Movie Manager", font=("Segoe UI", 24, "bold"), fg="#007BFF", bg="white").pack(pady=(10, 30))

        try:
            img = Image.open("images/login.png")
            img = img.resize((320, 240), Image.Resampling.LANCZOS)
            self.img_tk = ImageTk.PhotoImage(img)
            tk.Label(frame, image=self.img_tk, bg="white").pack()
        except:
            tk.Label(frame, text="[Image not found]", fg="red", bg="white").pack()

        return frame

    def show_login_screen(self):
        # X√≥a widget c≈©
        for widget in self.root.winfo_children():
            widget.destroy()

        self.root.title("Movie Manager - Sign In")
        self.root.geometry("900x500")
        self.root.configure(bg="white")
        self.root.resizable(False, False)

        bg_frame = tk.Frame(self.root, bg="white")
        bg_frame.pack(fill=tk.BOTH, expand=True)

        # ==== TR√ÅI ====
        self.create_left_panel(bg_frame)

        # ==== PH·∫¢I ====
        right_frame = tk.Frame(bg_frame, width=400, height=400, bg="white")
        right_frame.pack(side=tk.RIGHT, padx=(10, 50), pady=30)
        right_frame.pack_propagate(False)

        tk.Label(right_frame, text="Sign in", font=("Segoe UI", 20, "bold"), fg="#007BFF", bg="white").pack(pady=(10, 25))

        form = tk.Frame(right_frame, bg="white")
        form.pack()

        tk.Label(form, text="Username", font=("Segoe UI", 10), bg="white").grid(row=0, column=0, sticky="w")
        self.username_entry = ttk.Entry(form, width=32, font=("Segoe UI", 10))
        self.username_entry.grid(row=1, column=0, pady=(5, 15), ipady=4)

        tk.Label(form, text="Password", font=("Segoe UI", 10), bg="white").grid(row=2, column=0, sticky="w")
        self.password_entry = ttk.Entry(form, width=32, font=("Segoe UI", 10), show="*")
        self.password_entry.grid(row=3, column=0, pady=(5, 15), ipady=4)

        self.is_admin = tk.BooleanVar()
        tk.Checkbutton(
            form,
            text="Log in as administrator",
            variable=self.is_admin,
            font=("Segoe UI", 9),
            bg="white"
        ).grid(row=4, column=0, sticky="w", pady=(5, 15))

        ttk.Button(form, text="Sign in", command=self.login).grid(row=5, column=0, pady=(10, 20), ipadx=10)

        bottom_frame = tk.Frame(right_frame, bg="white")
        bottom_frame.pack()
        tk.Label(bottom_frame, text="Don't have an account?", bg="white", font=("Segoe UI", 9)).pack(side=tk.LEFT)
        register_link = tk.Label(
            bottom_frame, text=" Sign up", fg="#007BFF", bg="white", cursor="hand2", font=("Segoe UI", 9, "underline")
        )
        register_link.pack(side=tk.LEFT)
        register_link.bind("<Button-1>", lambda e: self.show_register_screen())

    def login(self):
        """X·ª≠ l√Ω ƒëƒÉng nh·∫≠p"""
        username = self.username_entry.get()
        password = self.password_entry.get()
        is_admin = self.is_admin.get()
        
        if not username or not password:
            messagebox.showerror("Error", "Please enter both username and password")
            return
        
        # Ki·ªÉm tra ƒëƒÉng nh·∫≠p qu·∫£n tr·ªã
        if is_admin:
            for user in self.users:
                if user['username'] == username and user['password'] == password:
                    if user.get('role') == 'admin':
                        self.current_user = user
                        messagebox.showinfo("Success", "Admin login successful!")
                        self.create_admin_gui()
                        return
                    else:
                        messagebox.showerror("Error", "You are not an administrator.")
                        return
            messagebox.showerror("Error", "Invalid admin credentials")
            return
        
        # Ki·ªÉm tra ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng th∆∞·ªùng
        for user in self.users:
            if user['username'] == username and user['password'] == password:
                if user.get('is_locked', False):
                    messagebox.showerror("Error", "This account has been locked. Please contact administrator.")
                    return
                self.current_user = user
                if 'favorites' not in self.current_user:
                    self.current_user['favorites'] = []
                messagebox.showinfo("Success", "Login successful!")
                self.create_main_gui()
                return
        
        messagebox.showerror("Error", "Invalid username or password")

    def _on_mousewheel(self, event):
        if event.num == 4 or event.delta > 0:
            self.canvas.yview_scroll(-1, "units")
        elif event.num == 5 or event.delta < 0:
            self.canvas.yview_scroll(1, "units")
    
    def create_main_gui(self):
        # X√≥a widget c≈©
        for widget in self.root.winfo_children():
            widget.destroy()

        # ===== T·∫°o menu =====
        self.menu_bar = tk.Menu(self.root)
        self.root.config(menu=self.menu_bar)

        file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Menu", menu=file_menu)
        file_menu.add_separator()
        file_menu.add_command(label="Logout", command=self.logout)
        file_menu.add_command(label="Exit", command=self.root.quit)

        user_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="User", menu=user_menu)
        user_menu.add_command(label="Profile", command=self.show_profile)
        user_menu.add_command(label="Y√™u th√≠ch", command=self.show_favorites)

        # ===== Main frame =====
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # ===== Thanh t√¨m ki·∫øm =====
        search_frame = ttk.Frame(self.main_frame)
        search_frame.pack(fill=tk.X, pady=5)
        tk.Label(search_frame, text="T√¨m ki·∫øm:", font=("Segoe UI", 10),bg="white").pack(side=tk.LEFT, padx=(0, 5),)

        # ‚Äì √î nh·∫≠p text (Entry)
        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=40)
        self.search_entry.pack(side=tk.LEFT, padx=5)
        # Bind ƒë·ªÉ auto‚Äêsearch khi g√µ
        self.search_entry.bind("<KeyRelease>", self.trigger_auto_search)

        # ‚Äì Combobox ch√≠nh: ‚ÄúT√™n phim‚Äù / ‚ÄúNƒÉm‚Äù / ‚ÄúTh·ªÉ lo·∫°i‚Äù
        self.search_criteria = tk.StringVar(value="Ch·ªçn l·ªçc")
        self.criteria_combobox = ttk.Combobox(
            search_frame,
            textvariable=self.search_criteria,
            values=["T√™n phim", "NƒÉm", "Th·ªÉ lo·∫°i"],
            state="readonly",
            width=12
        )
        self.criteria_combobox.pack(side=tk.LEFT, padx=5)
        # Khi ch·ªçn criteria, g·ªçi on_criteria_change
        self.criteria_combobox.bind("<<ComboboxSelected>>", self.on_criteria_change)

        # ‚Äì (X√≥a Button ‚ÄúT√¨m ki·∫øm‚Äù n·∫øu kh√¥ng c·∫ßn) 
        # ‚Äì N√∫t ‚ÄúHi·ªán t·∫•t c·∫£‚Äù ƒë·ªÉ reset danh s√°ch
        ttk.Button(search_frame, text="Hi·ªán t·∫•t c·∫£", command=self.show_all_movies).pack(side=tk.LEFT, padx=5)

        # ===== Khung hi·ªÉn th·ªã phim =====
        self.movie_frame = ttk.Frame(self.main_frame)
        self.movie_frame.pack(fill=tk.BOTH, expand=True)

        self.canvas = tk.Canvas(self.movie_frame, bg="white")
        self.scrollbar = ttk.Scrollbar(self.movie_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = ttk.Frame(self.canvas)

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        self.canvas_window = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        # S·ªë phim 1 trang & trang hi·ªán t·∫°i
        self.movies_per_page = 10
        self.current_page = 0
        self.display_movies()

        # Bind cu·ªôn chu·ªôt
        self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)

        # ===== Combobox ph·ª• ‚ÄúTh·ªÉ lo·∫°i‚Äù (·∫©n m·∫∑c ƒë·ªãnh) =====
        self.genre_var = tk.StringVar()
        self.genre_combobox = ttk.Combobox(
            search_frame,
            textvariable=self.genre_var,
            state="readonly",
            width=20
        )
        self.genre_combobox.pack(side=tk.LEFT, padx=5)
        self.genre_combobox.pack_forget()  # ·∫®n ban ƒë·∫ßu
        self.genre_combobox.bind("<<ComboboxSelected>>",
            lambda e: self.filter_by_genre(self.genre_var.get()))

    def on_criteria_change(self, event=None):
        selected = self.search_criteria.get()

        # M·ªói l·∫ßn thay ƒë·ªïi ti√™u ch√≠, ta ·∫©n combobox ph·ª•
        self.genre_combobox.pack_forget()

        if selected == "T√™n phim":
            # Khi ch·ªçn ‚ÄúT√™n phim‚Äù, t·ª± ƒë·ªông s·∫Øp x·∫øp to√†n b·ªô danh s√°ch theo t√™n (A‚ÜíZ)
            sorted_movies = sorted(self.movies, key=lambda m: m.get('title', '').lower())
            self.current_page = 0
            self.display_movies(sorted_movies)

            # ƒê·∫£m b·∫£o √¥ nh·∫≠p (search_entry) c√≤n ƒë∆∞·ª£c bind ƒë·ªÉ filter theo KeyRelease
            # (trigger_auto_search s·∫Ω ho·∫°t ƒë·ªông v√¨ criteria hi·ªán l√† ‚ÄúT√™n phim‚Äù)

        elif selected == "NƒÉm":
            # Khi ch·ªçn ‚ÄúNƒÉm‚Äù, t·ª± ƒë·ªông s·∫Øp x·∫øp to√†n b·ªô danh s√°ch theo nƒÉm gi·∫£m d·∫ßn
            sorted_movies = sorted(self.movies, key=lambda m: int(m.get('year', 0)), reverse=True)
            self.current_page = 0
            self.display_movies(sorted_movies)

            # T∆∞∆°ng t·ª±, √¥ nh·∫≠p v·∫´n bind KeyRelease (trigger_auto_search) v√¨ criteria l√† ‚ÄúNƒÉm‚Äù

        elif selected == "Th·ªÉ lo·∫°i":
            # Khi ch·ªçn ‚ÄúTh·ªÉ lo·∫°i‚Äù, ta ph·∫£i load danh s√°ch th·ªÉ lo·∫°i t·ª´ to√†n b·ªô self.movies
            genres = sorted(set(m.get('genre', '') for m in self.movies if m.get('genre')))
            self.genre_combobox['values'] = genres
            self.genre_combobox.set("")   # reset gi√° tr·ªã hi·ªÉn th·ªã
            self.genre_combobox.pack(side=tk.LEFT, padx=5)
            # Sau khi show combobox ph·ª•, ng∆∞·ªùi d√πng s·∫Ω ch·ªçn 1 th·ªÉ lo·∫°i c·ª• th·ªÉ -> filter_by_genre()

    def search_movies(self):
        """
        ƒê∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng b·∫•m n√∫t ‚ÄúT√¨m ki·∫øm‚Äù.
        D·ª±a v√†o criteria ƒëang ch·ªçn, l·∫•y to√†n b·ªô self.movies v√† l·ªçc theo query.
        """
        option = self.search_criteria.get()
        query = self.search_var.get().strip().lower()

        if option == "T√™n phim":
            # L·ªçc theo query trong title
            filtered = [m for m in self.movies if query in m.get('title', '').lower()]
            self.current_page = 0
            self.display_movies(filtered)

        elif option == "NƒÉm":
            # L·ªçc theo query trong year
            filtered = [m for m in self.movies if query in str(m.get('year', '')).lower()]
            self.current_page = 0
            self.display_movies(filtered)

        elif option == "Th·ªÉ lo·∫°i":
            # N·∫øu criteria l√† ‚ÄúTh·ªÉ lo·∫°i‚Äù v√† b·∫•m ‚ÄúT√¨m ki·∫øm‚Äù (thay v√¨ ch·ªçn t·ª´ combobox ph·ª•),
            # ch√∫ng ta v·∫´n l·ªçc theo query t·ª´ √¥ nh·∫≠p v√†o (ch·ªâ so s√°nh v·ªõi tr∆∞·ªùng 'genre').
            filtered = [m for m in self.movies if query in m.get('genre', '').lower()]
            self.current_page = 0
            self.display_movies(filtered)

        else:
            # N·∫øu ch∆∞a ch·ªçn criteria (ho·∫∑c ‚ÄúCh·ªçn l·ªçc‚Äù), show t·∫•t c·∫£
            self.current_page = 0
            self.display_movies()

    def filter_by_genre(self, genre):
        """
        ƒê∆∞·ª£c g·ªçi ngay khi ng∆∞·ªùi d√πng ch·ªçn 1 gi√° tr·ªã trong combobox ph·ª• ‚ÄúTh·ªÉ lo·∫°i‚Äù.
        L·ªçc m·ªçi phim c√≥ 'genre' ch·ª©a t·ª´ kho√° (genre), hi·ªÉn th·ªã ngay.
        """
        filtered = [m for m in self.movies if genre.lower() in m.get('genre', '').lower()]
        # X√≥a n·ªôi dung √¥ nh·∫≠p ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n
        self.search_var.set("")
        self.current_page = 0
        self.display_movies(filtered)

    def trigger_auto_search(self, event=None):
        """
        ƒê∆∞·ª£c g·ªçi m·ªói khi g√µ ph√≠m trong √¥ search_entry.
        - N·∫øu criteria l√† "Ch·ªçn l·ªçc" ho·∫∑c "T√™n phim", s·∫Ω l·ªçc theo title.
        - N·∫øu criteria l√† "NƒÉm", s·∫Ω l·ªçc theo year.
        - N·∫øu criteria l√† "Th·ªÉ lo·∫°i", s·∫Ω l·ªçc theo genre ƒëang ch·ªçn v√† title.
        """
        criteria = self.search_criteria.get().strip()
        query = self.search_var.get().strip().lower()

        # Tr∆∞·ªùng h·ª£p ch∆∞a ch·ªçn g√¨ (m·∫∑c ƒë·ªãnh l√† "Ch·ªçn l·ªçc") ho·∫∑c ch·ªçn "T√™n phim"
        if criteria in ("", "Ch·ªçn l·ªçc", "T√™n phim"):
            filtered = [
                m for m in self.movies
                if query in m.get('title', '').lower()
            ]
            self.canvas.yview_moveto(0)


        # Tr∆∞·ªùng h·ª£p ch·ªçn "NƒÉm"
        elif criteria == "NƒÉm":
            filtered = [
                m for m in self.movies
                if query in str(m.get('title', '')).lower()
            ]
            self.canvas.yview_moveto(0)


        # Tr∆∞·ªùng h·ª£p ch·ªçn "Th·ªÉ lo·∫°i"
        else:  # criteria == "Th·ªÉ lo·∫°i"
            selected_genre = self.genre_var.get().strip().lower()
            filtered = [
                m for m in self.movies
                if selected_genre in m.get('genre', '').lower()
                and query in m.get('title', '').lower()
            ]
            self.canvas.yview_moveto(0)

        self.current_page = 0
        self.display_movies(filtered)

    def toggle_fullscreen(self, event=None):
        self.is_fullscreen = not self.is_fullscreen
        self.root.attributes("-fullscreen", self.is_fullscreen)

    def exit_fullscreen(self, event=None):
        self.is_fullscreen = False
        self.root.attributes("-fullscreen", False)

    def show_all_movies(self):
        self.display_movies()


    def display_movies(self, movies=None):
        # --- Ph·∫ßn hi·ªán t·∫°i c·ªßa b·∫°n: x√≥a n·ªôi dung scrollable_frame ---
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

        # Hi·ªán l·∫°i scrollbar v√† bind cu·ªôn chu·ªôt
        self.scrollbar.pack(side="right", fill="y")
        self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)

        movie_list = movies if movies is not None else self.movies
        print("S·ªë l∆∞·ª£ng phim ƒë·ªÉ hi·ªÉn th·ªã:", len(movie_list))

        if not movie_list:
            ttk.Label(self.scrollable_frame, text="No movies available.", font=('Arial', 12)).pack(pady=20)
            # N·∫øu danh s√°ch tr·ªëng, v·∫´n ph·∫£i x√≥a pagination c≈© v√† kh√¥ng t·∫°o m·ªõi
            if hasattr(self, 'pagination_frame'):
                self.pagination_frame.destroy()
            return

        total_pages = (len(movie_list) - 1) // self.movies_per_page + 1
        start = self.current_page * self.movies_per_page
        end = start + self.movies_per_page
        page_movies = movie_list[start:end]

        # T·∫°o widget cho t·ª´ng phim
        for movie in page_movies:
            self.create_movie_widget(movie)

        # --- K·∫æT TH√öC VI·ªÜC V·∫º PHIM TRONG scrollable_frame ---

        # --- B∆Ø·ªöC M·ªöI: t·∫°o/ƒë·∫∑t l·∫°i pagination ra ngo√†i v√πng scroll ---
        # N·∫øu tr∆∞·ªõc ƒë√≥ ƒë√£ c√≥ pagination_frame (t·ª´ l·∫ßn render tr∆∞·ªõc),
        # th√¨ x√≥a n√≥ ƒëi ƒë·ªÉ gi·ªØ ƒë∆∞·ª£c 1 thanh ph√¢n trang duy nh·∫•t.
        if hasattr(self, 'pagination_frame'):
            self.pagination_frame.destroy()

        # T·∫°o m·ªôt frame ch·ª©a pagination, ƒë√≥ng g√≥i trong self.main_frame (kh√¥ng ph·∫£i self.scrollable_frame)
        self.pagination_frame = ttk.Frame(self.main_frame)
        # pack v·ªõi anchor="center" ƒë·ªÉ canh gi·ªØa; kh√¥ng d√πng fill=tk.X
        self.pagination_frame.pack(pady=10, anchor="center")

        # B√¢y gi·ªù, chia pagination_frame th√†nh ba ph·∫ßn: tr√°i (First/Prev), gi·ªØa (Label Trang), ph·∫£i (Next/Last)
        left_frame = ttk.Frame(self.pagination_frame)
        left_frame.pack(side=tk.LEFT)

        if self.current_page > 0:
            ttk.Button(
                left_frame,
                text="V·ªÅ trang ƒë·∫ßu",
                command=lambda: self.go_to_first_page(movie_list)
            ).pack(side=tk.LEFT, padx=(0, 8))

        ttk.Button(
            left_frame,
            text="Trang tr∆∞·ªõc",
            command=lambda: self.change_page(-1, movie_list)
        ).pack(side=tk.LEFT)

        # Label ·ªü gi·ªØa
        lbl = ttk.Label(
            self.pagination_frame,
            text=f"Trang {self.current_page + 1} / {total_pages}"
        )
        lbl.pack(side=tk.LEFT, padx=12)

        right_frame = ttk.Frame(self.pagination_frame)
        right_frame.pack(side=tk.LEFT)

        ttk.Button(
            right_frame,
            text="Trang sau",
            command=lambda: self.change_page(1, movie_list)
        ).pack(side=tk.LEFT, padx=(0, 8))

        if self.current_page < total_pages - 1:
            ttk.Button(
                right_frame,
                text="V·ªÅ trang cu·ªëi",
                command=lambda: self.go_to_last_page(movie_list)
            ).pack(side=tk.LEFT)


    def go_to_first_page(self, movie_list):
        self.current_page = 0
        self.display_movies(movie_list)

    def go_to_last_page(self, movie_list):
        total_pages = (len(movie_list) - 1) // self.movies_per_page + 1
        self.current_page = total_pages - 1
        self.display_movies(movie_list)

    def change_page(self, delta, movie_list):
        total_pages = (len(movie_list) - 1) // self.movies_per_page + 1
        self.current_page = max(0, min(self.current_page + delta, total_pages - 1))
        self.display_movies(movie_list)

    def create_movie_widget(self, movie):
        movie_frame = ttk.Frame(self.scrollable_frame, padding=10, style="Movie.TFrame")
        movie_frame.pack(fill=tk.X, pady=8)

        # === POSTER ===
        poster_displayed = False
        genre_slug = movie.get('genre', '').lower().replace(' ', '-')
        poster_filename = movie.get("poster_filename") or f"{slugify_title(movie['title'])}.jpg"
        poster_path = f"images/{genre_slug}/{poster_filename}"

        print(f"üß© ƒêang t√¨m ·∫£nh: {poster_path}")

        try:
            if os.path.exists(poster_path):
                image = Image.open(poster_path)
                image = image.resize((100, 150), Image.LANCZOS)
                photo = ImageTk.PhotoImage(image)
                poster_label = ttk.Label(movie_frame, image=photo)
                poster_label.image = photo
                poster_label.pack(side=tk.LEFT, padx=(10, 15))
                poster_displayed = True
            else:
                print(f"‚ùì Kh√¥ng t√¨m th·∫•y file poster: {poster_path}")
        except UnidentifiedImageError:
            print(f"‚ö†Ô∏è ·∫¢nh b·ªã l·ªói: {poster_path}")
        except Exception as e:
            print(f"‚ùå L·ªói poster: {e}")

        if not poster_displayed:
            ttk.Label(movie_frame, text="[No Poster]", width=15).pack(side=tk.LEFT, padx=(10, 15))

        # === INFO ===
        info_frame = ttk.Frame(movie_frame, style="Movie.TFrame")
        info_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        ttk.Label(info_frame, text=movie.get('title', 'No title'), font=('Segoe UI', 14, 'bold')).pack(anchor='w', pady=(0, 2))
        ttk.Label(info_frame, text=f"Th·ªÉ lo·∫°i: {movie.get('genre', 'Unknown')}").pack(anchor='w')
        ttk.Label(info_frame, text=f"NƒÉm: {movie.get('year', 'Unknown')}").pack(anchor='w')
        ttk.Label(info_frame, text=f"Rating: {movie.get('rating', 'N/A')}").pack(anchor='w')
        ttk.Label(info_frame, text=movie.get('description', ''), wraplength=550, justify=tk.LEFT).pack(anchor='w', pady=5)

        button_frame = ttk.Frame(info_frame)
        button_frame.pack(anchor='w', pady=(0, 5))

        ttk.Button(button_frame, text="‚ñ∂ Xem phim", command=lambda m=movie: self.watch_movie(m)).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="‚ù§ Y√™u th√≠ch", command=lambda m=movie: self.add_to_favorites(m)).pack(side=tk.LEFT)

    def watch_movie(self, movie):
        webbrowser.open(movie['movie_url'])
    
    def add_to_favorites(self, movie):
        favorites = self.current_user.setdefault('favorites', [])
        if movie['url'] not in [f['url'] for f in favorites]:
            favorites.append(movie)
            self.save_data()
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m {movie['title']} v√†o danh s√°ch y√™u th√≠ch!")
        else:
            messagebox.showinfo("Th√¥ng b√°o", f"{movie['title']} ƒë√£ c√≥ trong danh s√°ch y√™u th√≠ch.")
    
    def remove_from_favorites(self, movie):
        favorites = self.current_user.get('favorites', [])
        self.current_user['favorites'] = [f for f in favorites if f['url'] != movie['url']]
        self.save_data()
        messagebox.showinfo("ƒê√£ x√≥a", f"ƒê√£ x√≥a '{movie['title']}' kh·ªèi danh s√°ch y√™u th√≠ch.")
        self.show_favorites()  # C·∫≠p nh·∫≠t l·∫°i giao di·ªán

    def show_favorites(self):
        """
        Hi·ªÉn th·ªã giao di·ªán danh s√°ch y√™u th√≠ch ƒë√£ lo·∫°i b·ªè n√∫t ‚ÄúHi·ªán t·∫•t c·∫£‚Äù:
        - M·ªôt √¥ TextEntry ƒë·ªÉ t√¨m theo 'title'
        - Danh s√°ch phim ƒë√£ ƒë√°nh d·∫•u y√™u th√≠ch, k√®m ph√¢n trang
        """

        self.in_favorites_view = True
        self.current_page = 0

        # 1. X√≥a to√†n b·ªô widget c≈© trong self.main_frame
        for widget in self.main_frame.winfo_children():
            widget.destroy()

        # 2. T·∫°o khung T√åM KI·∫æM (ch·ªâ 1 √¥ t√¨m ki·∫øm theo title, kh√¥ng c√≤n n√∫t "Hi·ªán t·∫•t c·∫£")
        fav_search_frame = ttk.Frame(self.main_frame)
        fav_search_frame.pack(fill=tk.X, pady=(10, 5), padx=10)

        # Label ‚ÄúT√¨m trong Y√™u th√≠ch:‚Äù 
        tk.Label(
            fav_search_frame,
            text="T√¨m trong Y√™u th√≠ch:",
            font=("Segoe UI", 10),
            bg="white"
        ).pack(side=tk.LEFT, padx=(0, 5))

        # Entry ƒë·ªÉ nh·∫≠p t·ª´ kho√° t√¨m ki·∫øm (ch·ªâ filter theo title)
        self.fav_search_var = tk.StringVar()
        self.fav_search_entry = ttk.Entry(
            fav_search_frame,
            textvariable=self.fav_search_var,
            width=30
        )
        self.fav_search_entry.pack(side=tk.LEFT, padx=(0, 10))
        self.fav_search_entry.bind("<KeyRelease>", self.trigger_fav_search)

        # (ƒë√£ lo·∫°i b·ªè ho√†n to√†n ph·∫ßn t·∫°o n√∫t ‚ÄúHi·ªán t·∫•t c·∫£‚Äù ·ªü ƒë√¢y)

        # 3. T·∫°o Canvas + Scrollbar ƒë·ªÉ show danh s√°ch favorites
        fav_list_frame = ttk.Frame(self.main_frame)
        fav_list_frame.pack(fill=tk.BOTH, expand=True, padx=10)

        self.fav_canvas = tk.Canvas(fav_list_frame, bg="white")
        self.fav_scrollbar = ttk.Scrollbar(
            fav_list_frame,
            orient="vertical",
            command=self.fav_canvas.yview
        )

        self.fav_inner_frame = ttk.Frame(self.fav_canvas)
        self.fav_inner_frame.bind(
            "<Configure>",
            lambda e: self.fav_canvas.configure(scrollregion=self.fav_canvas.bbox("all"))
        )

        self.fav_canvas_window = self.fav_canvas.create_window(
            (0, 0),
            window=self.fav_inner_frame,
            anchor="nw"
        )
        self.fav_canvas.configure(yscrollcommand=self.fav_scrollbar.set)

        self.fav_canvas.pack(side=tk.LEFT, fill="both", expand=True)
        self.fav_scrollbar.pack(side=tk.RIGHT, fill="y")

        # Bind scroll chu·ªôt cho Canvas favorite
        self.fav_canvas.bind_all("<MouseWheel>", self._fav_on_mousewheel)

        # 4. L·∫ßn ƒë·∫ßu ti√™n, hi·ªÉn th·ªã to√†n b·ªô favorites (ch∆∞a filter)
        self.filtered_fav_list = list(self.current_user.get('favorites', []))
        self.display_favorites_page()

    # --------------------------------------
    def _fav_on_mousewheel(self, event):
        """H√†m h·ªó tr·ª£ cu·ªôn chu·ªôt trong canvas danh s√°ch Y√™u th√≠ch."""
        if event.delta > 0 or event.num == 4:
            self.fav_canvas.yview_scroll(-1, "units")
        elif event.delta < 0 or event.num == 5:
            self.fav_canvas.yview_scroll(1, "units")

    # --------------------------------------
    def reset_fav_search(self):
        """Khi b·∫•m ‚ÄòHi·ªán t·∫•t c·∫£‚Äô, x√≥a filter v√† show l·∫°i page 1."""
        self.fav_search_var.set("")
        self.current_page = 0
        self.filtered_fav_list = list(self.current_user.get('favorites', []))
        self.display_favorites_page()
        self.fav_canvas.yview_moveto(0)

    # --------------------------------------
    def trigger_fav_search(self, event=None):
        """
        ƒê∆∞·ª£c g·ªçi m·ªói khi g√µ ph√≠m trong √¥ fav_search_entry.
        Ch·ªâ l·ªçc theo 'title' (kh√¥ng c√≤n kh·∫£ nƒÉng l·ªçc theo NƒÉm/Th·ªÉ lo·∫°i).
        """
        query = self.fav_search_var.get().strip().lower()
        all_favs = self.current_user.get('favorites', [])

        if query == "":
            # N·∫øu query r·ªóng, show l·∫°i to√†n b·ªô
            filtered = list(all_favs)
        else:
            # L·ªçc t·∫•t c·∫£ Y√™u th√≠ch, ch·ªâ gi·ªØ phim c√≥ title ch·ª©a query
            filtered = [
                m for m in all_favs
                if query in m.get('title', '').lower()
            ]

        # Reset trang v·ªÅ trang ƒë·∫ßu, c·∫≠p nh·∫≠t danh s√°ch v√† hi·ªÉn th·ªã
        self.current_page = 0
        self.filtered_fav_list = filtered
        self.display_favorites_page()
        self.fav_canvas.yview_moveto(0)

    # --------------------------
    def display_favorites_page(self):
        """
        Hi·ªÉn th·ªã trang mang index self.current_page c·ªßa self.filtered_fav_list.
        1. X√≥a widget c≈© trong fav_inner_frame
        2. L·∫•y slice t∆∞∆°ng ·ª©ng page hi·ªán t·∫°i
        3. V·∫Ω t·ª´ng phim v·ªõi poster, info v√† n√∫t ‚ÄúXem phim‚Äù / ‚ÄúX√≥a kh·ªèi y√™u th√≠ch‚Äù
        4. V·∫Ω pagination (Prev/Label/Next) canh gi·ªØa ngang c·ª≠a s·ªï
        """
        # (1) X√≥a n·ªôi dung c≈©
        for w in self.fav_inner_frame.winfo_children():
            w.destroy()

        favs = self.filtered_fav_list
        total = len(favs)
        per_page = self.movies_per_page
        total_pages = (total - 1) // per_page + 1 if total > 0 else 1

        # N·∫øu kh√¥ng c√≥ phim n√†o
        if total == 0:
            ttk.Label(
                self.fav_inner_frame,
                text="(Ch∆∞a c√≥ phim trong Y√™u th√≠ch ho·∫∑c kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£)",
                font=("Segoe UI", 12),
                foreground="#666666"
            ).pack(pady=20)
            return

        # (2) L·∫•y slice t∆∞∆°ng ·ª©ng page hi·ªán t·∫°i
        start_idx = self.current_page * per_page
        end_idx = start_idx + per_page
        page_list = favs[start_idx:end_idx]

        # (3) V·∫Ω t·ª´ng phim
        for movie in page_list:
            mv_frame = ttk.Frame(self.fav_inner_frame, padding=10)
            mv_frame.pack(fill=tk.X, pady=5, padx=10)

            # Poster (80√ó120)
            poster_displayed = False
            genre_slug = movie.get('genre', '').lower().replace(' ', '-')
            poster_filename = movie.get("poster_filename") or f"{slugify_title(movie['title'])}.jpg"
            poster_path = f"images/{genre_slug}/{poster_filename}"
            try:
                if os.path.exists(poster_path):
                    img = Image.open(poster_path).resize((80, 120), Image.LANCZOS)
                    photo = ImageTk.PhotoImage(img)
                    lbl = ttk.Label(mv_frame, image=photo)
                    lbl.image = photo
                    lbl.pack(side=tk.LEFT, padx=(0, 15))
                    poster_displayed = True
            except:
                pass
            if not poster_displayed:
                ttk.Label(mv_frame, text="[No Poster]", width=12).pack(side=tk.LEFT, padx=(0, 15))

            # Th√¥ng tin phim
            info_f = ttk.Frame(mv_frame)
            info_f.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

            ttk.Label(
                info_f,
                text=movie.get('title', 'No title'),
                font=("Segoe UI", 13, "bold")
            ).pack(anchor="w", pady=(0, 2))
            ttk.Label(
                info_f,
                text=f"Th·ªÉ lo·∫°i: {movie.get('genre', 'Unknown')}",
                font=("Segoe UI", 11)
            ).pack(anchor="w")
            ttk.Label(
                info_f,
                text=f"NƒÉm: {movie.get('year', 'Unknown')}",
                font=("Segoe UI", 11)
            ).pack(anchor="w")
            ttk.Label(
                info_f,
                text=f"Rating: {movie.get('rating', 'N/A')}",
                font=("Segoe UI", 11)
            ).pack(anchor="w", pady=(0, 8))

            # N√∫t ‚ÄúXem phim‚Äù v√† ‚ÄúX√≥a kh·ªèi y√™u th√≠ch‚Äù
            btnf = ttk.Frame(info_f)
            btnf.pack(anchor="w", pady=(0,5))

            # D√πng style Gray.TButton (ƒë√£ ƒë·ªãnh nghƒ©a trong show_profile)
            ttk.Button(
                btnf,
                text="‚ñ∂ Xem phim",
                style="Gray.TButton",
                command=lambda m=movie: self.watch_movie(m)
            ).pack(side=tk.LEFT, padx=(0,10))
            ttk.Button(
                btnf,
                text="üóëÔ∏è X√≥a kh·ªèi y√™u th√≠ch",
                style="Gray.TButton",
                command=lambda m=movie: self._remove_and_refresh(m)
            ).pack(side=tk.LEFT)

        # (4) Pagination: t·∫°o container tr·∫£i r·ªông ngang fav_inner_frame
        if hasattr(self, 'fav_pagination_container'):
            self.fav_pagination_container.destroy()

        self.fav_pagination_container = ttk.Frame(self.fav_inner_frame)
        self.fav_pagination_container.pack(fill=tk.X)

        # T·∫°o frame con ƒë·ªÉ cho n√∫t Prev‚ÄìLabel‚ÄìNext v√† cƒÉn gi·ªØa n√≥
        self.fav_pagination_frame = ttk.Frame(self.fav_pagination_container)
        self.fav_pagination_frame.pack(pady=15, anchor="center")

        # N√∫t ‚Äú‚ü® Trang tr∆∞·ªõc‚Äù
        if self.current_page > 0:
            prev_btn = ttk.Button(
                self.fav_pagination_frame,
                text="‚ü® Trang tr∆∞·ªõc",
                command=lambda: self._fav_go_to_page(self.current_page - 1)
            )
        else:
            prev_btn = ttk.Button(
                self.fav_pagination_frame,
                text="‚ü® Trang tr∆∞·ªõc",
                state="disabled"
            )
        prev_btn.pack(side=tk.LEFT, padx=5)

        # Label gi·ªØa
        lbl = ttk.Label(
            self.fav_pagination_frame,
            text=f"Trang {self.current_page + 1} / {total_pages}",
            font=("Segoe UI", 11)
        )
        lbl.pack(side=tk.LEFT, padx=10)

        # N√∫t ‚ÄúTrang sau ‚ü©‚Äù
        if self.current_page < total_pages - 1:
            next_btn = ttk.Button(
                self.fav_pagination_frame,
                text="Trang sau ‚ü©",
                command=lambda: self._fav_go_to_page(self.current_page + 1)
            )
        else:
            next_btn = ttk.Button(
                self.fav_pagination_frame,
                text="Trang sau ‚ü©",
                state="disabled"
            )
        next_btn.pack(side=tk.LEFT, padx=5)

        # Cu·ªôn canvas favorites v·ªÅ ƒë·∫ßu
        self.fav_canvas.yview_moveto(0)

    # --------------------------
    def _fav_go_to_page(self, page_index):
        """Chuy·ªÉn trang favorites v√† redraw"""
        self.current_page = page_index
        self.display_favorites_page()

    # --------------------------
    def _remove_and_refresh(self, movie):
        """
        H√†m ƒë∆∞·ª£c g·ªçi khi b·∫•m ‚ÄúX√≥a kh·ªèi y√™u th√≠ch‚Äù:
        1. X√≥a movie kh·ªèi self.current_user['favorites']
        2. C·∫≠p nh·∫≠t file data (self.save_data())
        3. Reset ho·∫∑c gi·ªØ page hi·ªán t·∫°i, g·ªçi display l·∫°i.
        """
        favs = self.current_user.get('favorites', [])
        self.current_user['favorites'] = [m for m in favs if m.get('url') != movie.get('url')]
        self.save_data()
        # Sau khi x√≥a, n·∫øu page hi·ªán t·∫°i v∆∞·ª£t qu√° s·ªë trang m·ªõi => ƒë∆∞a v·ªÅ trang cu·ªëi
        new_total = len(self.current_user['favorites'])
        last_page = (new_total - 1)//self.movies_per_page if new_total > 0 else 0
        if self.current_page > last_page:
            self.current_page = last_page
        # C·∫≠p nh·∫≠t filtered list sao cho nh·∫•t qu√°n
        self.filtered_fav_list = list(self.current_user['favorites'])
        self.display_favorites_page()

    def show_register_screen(self):
    # X√≥a widget c≈©
        for widget in self.root.winfo_children():
            widget.destroy()

        self.root.title("Movie Manager - Register")
        self.root.geometry("900x500")
        self.root.configure(bg="white")
        self.root.resizable(False, False)

        bg_frame = tk.Frame(self.root, bg="white")
        bg_frame.pack(fill=tk.BOTH, expand=True)

        # ==== TR√ÅI ====
        self.create_left_panel(bg_frame)

        # ==== PH·∫¢I ====
        right_frame = tk.Frame(bg_frame, width=400, height=400, bg="white")
        right_frame.pack(side=tk.RIGHT, padx=(10, 50), pady=30)
        right_frame.pack_propagate(False)

        tk.Label(right_frame, text="Create Account", font=("Segoe UI", 20, "bold"), fg="#007BFF", bg="white").pack(pady=(10, 25))

        form = tk.Frame(right_frame, bg="white")
        form.pack()

        # Username
        tk.Label(form, text="Username", font=("Segoe UI", 10), bg="white").grid(row=0, column=0, sticky="w")
        username_entry = ttk.Entry(form, width=32, font=("Segoe UI", 10))
        username_entry.grid(row=1, column=0, pady=(5, 15), ipady=4)

        # Password
        tk.Label(form, text="Password", font=("Segoe UI", 10), bg="white").grid(row=2, column=0, sticky="w")
        password_entry = ttk.Entry(form, width=32, font=("Segoe UI", 10), show="*")
        password_entry.grid(row=3, column=0, pady=(5, 15), ipady=4)

        # Confirm Password
        tk.Label(form, text="Confirm Password", font=("Segoe UI", 10), bg="white").grid(row=4, column=0, sticky="w")
        confirm_password_entry = ttk.Entry(form, width=32, font=("Segoe UI", 10), show="*")
        confirm_password_entry.grid(row=5, column=0, pady=(5, 15), ipady=4)

        def register():
            username = username_entry.get()
            password = password_entry.get()
            confirm_password = confirm_password_entry.get()

            if not username or not password or not confirm_password:
                messagebox.showerror("Error", "Please fill in all fields")
                return

            if password != confirm_password:
                messagebox.showerror("Error", "Passwords do not match")
                return

            for user in self.users:
                if user['username'] == username:
                    messagebox.showerror("Error", "Username already exists")
                    return

            self.users.append({
                'username': username,
                'password': password,
                'role': 'user',
                'favorites': []
            })

            self.save_data()
            messagebox.showinfo("Success", "Registration successful!")
            self.show_login_screen()

        ttk.Button(form, text="Register", command=register).grid(row=6, column=0, pady=(10, 20), ipadx=10)

        # Link quay l·∫°i login
        back_link = tk.Label(
            right_frame,
            text="‚Üê Back to Sign in",
            fg="#007BFF",
            bg="white",
            cursor="hand2",
            font=("Segoe UI", 9, "underline")
        )
        back_link.pack()
        back_link.bind("<Button-1>", lambda e: self.show_login_screen())

    def logout(self):
        """ƒêƒÉng xu·∫•t"""
        self.in_favorites_view = False
        self.current_user = None
        self.show_login_screen()
    
    def show_profile(self):
        # X√≥a to√†n b·ªô widget trong c·ª≠a s·ªï ch√≠nh
        for widget in self.root.winfo_children():
            widget.destroy()

        # T·∫°o l·∫°i thanh menu
        self.menu_bar = tk.Menu(self.root)
        self.root.config(menu=self.menu_bar)

        file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Menu", menu=file_menu)
        file_menu.add_command(label="Logout", command=self.logout)
        file_menu.add_command(label="Exit", command=self.root.quit)

        user_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="User", menu=user_menu)
        user_menu.add_command(label="Profile", command=self.show_profile)
        user_menu.add_command(label="Y√™u th√≠ch", command=self.show_favorites)

        # T·∫°o main frame ch·ª©a giao di·ªán
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        # N·ªôi dung ch√≠nh (g·ªìm ·∫£nh ·ªü tr√°i, info + n√∫t ·ªü ph·∫£i)
        main_content = ttk.Frame(self.main_frame)
        main_content.pack(fill=tk.BOTH, expand=True, pady=20, padx=40)

        # ==== B√™n tr√°i: ·∫¢nh ƒë·∫°i di·ªán ====
        left_frame = tk.Frame(main_content, width=250, bg="white")
        left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 20))

        try:
            img = Image.open("images/Profile.jpg")
            img = img.resize((200, 200), Image.LANCZOS)
            self.profile_img = ImageTk.PhotoImage(img)
            lbl_img = tk.Label(left_frame, image=self.profile_img, bg="white")
            lbl_img.pack(pady=(10, 0))  # Gi·∫£m ch√∫t kho·∫£ng tr√™n ƒë·ªÉ avatar nh√¨n s√°t h∆°n
        except:
            tk.Label(left_frame, text="[Kh√¥ng th·ªÉ t·∫£i ·∫£nh]", fg="red", bg="white").pack(pady=(10, 0))

        # ==== B√™n ph·∫£i: Th√¥ng tin t√†i kho·∫£n + n√∫t ====
        right_frame = ttk.Frame(main_content)
        right_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # Ti√™u ƒë·ªÅ ‚ÄúTh√¥ng tin t√†i kho·∫£n‚Äù
        title_lbl = ttk.Label(
            right_frame,
            text="Th√¥ng tin t√†i kho·∫£n",
            font=("Segoe UI", 18, "bold"),
            foreground="#0078D7"  # M√†u xanh ƒë·∫≠m ƒë·∫≠m h∆°n cho ti√™u ƒë·ªÅ
        )
        title_lbl.pack(pady=(0, 15))  # Gi·∫£m kho·∫£ng tr√™n xu·ªëng 0, ch·ªâ ƒë·ªÉ 15 ·ªü d∆∞·ªõi

        # D√≤ng Username
        user_lbl = ttk.Label(
            right_frame,
            text=f"Username: {self.current_user['username']}",
            font=("Segoe UI", 12)
        )
        # Ch√∫ √Ω: \uF007 l√† m√£ FontAwesome cho icon ng∆∞·ªùi, nh∆∞ng ch·ªâ d√πng n·∫øu b·∫°n ƒëang c√†i font h·ªó tr·ª£. 
        # N·∫øu kh√¥ng, b·∫°n c√≥ th·ªÉ thay b·∫±ng text ƒë∆°n gi·∫£n "Username: ..." ho·∫∑c icon kh√°c m√† b·∫°n mu·ªën.
        user_lbl.pack(anchor="w", pady=(0, 5))  # Gi·∫£m kho·∫£ng tr√™n xu·ªëng 0, c√°ch d√≤ng sau 5px

        # D√≤ng Role
        role_lbl = ttk.Label(
            right_frame,
            text=f"Role: {self.current_user['role']}",
            font=("Segoe UI", 12)
        )
        role_lbl.pack(anchor="w", pady=(0, 5))

        # D√≤ng S·ªë phim y√™u th√≠ch
        fav_count = len(self.current_user.get('favorites', []))
        fav_lbl = ttk.Label(
            right_frame,
            text=f"S·ªë phim y√™u th√≠ch: {fav_count}",
            font=("Segoe UI", 12)
        )
        fav_lbl.pack(anchor="w", pady=(0, 15))  # TƒÉng t·ªâ l·ªá kho·∫£ng d∆∞·ªõi ƒë·ªÉ t√°ch ra kh·ªèi button

        # ==== Hai n√∫t gi·ªëng nhau, m√†u x√°m, c√°ch nhau 10px ====
        button_frame = ttk.Frame(right_frame)
        button_frame.pack(anchor="w", pady=(0, 0))  # Kh√¥ng c·∫ßn kho·∫£ng tr√™n l·ªõn

        # ƒê·ªãnh nghƒ©a style cho n√∫t x√°m (d√πng ttk.Style)
        style = ttk.Style()
        style.configure("Gray.TButton",
                        background="#E0E0E0",    # M√†u n·ªÅn x√°m nh·∫°t
                        foreground="#333333",    # Ch·ªØ m√†u t·ªëi
                        font=("Segoe UI", 10),
                        padding=5)
        style.map("Gray.TButton",
                  background=[("active", "#D0D0D0")])  # Khi hover/v√†o active: x√°m ƒë·∫≠m h∆°n ch√∫t

        # N√∫t ‚ÄúXem Y√™u th√≠ch‚Äù
        view_fav_btn = ttk.Button(
            button_frame,
            text="‚ù§  Xem Y√™u th√≠ch",
            style="Gray.TButton",
            command=self.show_favorites
        )
        view_fav_btn.pack(side=tk.LEFT, padx=(0, 10))  # C√°ch n√∫t k·∫ø ti·∫øp 10px

        # N√∫t ‚ÄúQuay l·∫°i trang ch√≠nh‚Äù
        back_btn = ttk.Button(
            button_frame,
            text="\u21A9  Quay l·∫°i trang ch√≠nh",
            style="Gray.TButton",
            command=self.create_main_gui
        )
        back_btn.pack(side=tk.LEFT)

        # L∆∞u √Ω: n·∫øu mu·ªën hai n√∫t gi·ªëng h·ªát ho√†n to√†n (chi·ªÅu r·ªông, ƒë·ªô cao),
        # b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng width=... trong pack ho·∫∑c grid ƒë·ªÉ c·ªë ƒë·ªãnh ƒë·ªô r·ªông.
        # ·ªû ƒë√¢y, hai n√∫t ƒë·ªÅu x√†i c√πng style ‚ÄúGray.TButton‚Äù, n√™n nh√¨n s·∫Ω ƒë·ªìng nh·∫•t.

    def create_admin_gui(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        main_frame = tk.Frame(self.root, bg="white")
        main_frame.pack(fill=tk.BOTH, expand=True)
        self.in_favorites_view = False
        # ==== ·∫¢NH B√äN TR√ÅI ====
        left_frame = tk.Frame(main_frame, width=300, bg="white")
        left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=20, pady=20)

        try:
            img = Image.open("images/login.png")
            img = img.resize((250, 200), Image.LANCZOS)
            self.admin_img = ImageTk.PhotoImage(img)
            tk.Label(left_frame, image=self.admin_img, bg="white").pack()
            tk.Label(left_frame, text="üé¨ Movie Manager", font=("Segoe UI", 16, "bold"), fg="#007BFF", bg="white").pack(pady=10)
        except:
            tk.Label(left_frame, text="[Kh√¥ng th·ªÉ t·∫£i ·∫£nh]", fg="red", bg="white").pack()

        # ==== NOTEBOOK B√äN PH·∫¢I ====
        right_frame = tk.Frame(main_frame)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        self.menu_bar = tk.Menu(self.root)
        self.root.config(menu=self.menu_bar)
        
        file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.menu_bar.add_cascade(label="Menu", menu=file_menu)
        file_menu.add_command(label="Logout", command=self.logout)
        file_menu.add_command(label="Exit", command=self.root.quit)

        notebook = ttk.Notebook(right_frame)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # === TAB QU·∫¢N L√ù PHIM ===
        movies_frame = ttk.Frame(notebook)
        notebook.add(movies_frame, text="Qu·∫£n l√Ω phim")

        movie_canvas = tk.Canvas(movies_frame, bg="white")
        movie_scrollbar = ttk.Scrollbar(movies_frame, orient="vertical", command=movie_canvas.yview)
        scrollable_movie_frame = ttk.Frame(movie_canvas)

        scrollable_movie_frame.bind("<Configure>", lambda e: movie_canvas.configure(scrollregion=movie_canvas.bbox("all")))
        movie_canvas.create_window((0, 0), window=scrollable_movie_frame, anchor="nw")
        movie_canvas.configure(yscrollcommand=movie_scrollbar.set)

        movie_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        movie_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        for movie in self.movies:
            movie_row = ttk.Frame(scrollable_movie_frame, padding=5)
            movie_row.pack(fill=tk.X, pady=2)
            ttk.Label(movie_row, text=movie["title"], width=40).pack(side=tk.LEFT, padx=5)
            ttk.Button(movie_row, text="S·ª≠a", command=lambda m=movie: self.edit_movie(m)).pack(side=tk.LEFT, padx=2)
            ttk.Button(movie_row, text="X√≥a", command=lambda m=movie: self.delete_movie(m)).pack(side=tk.LEFT, padx=2)

        # === TAB QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG ===
        users_frame = ttk.Frame(notebook)
        notebook.add(users_frame, text="Qu·∫£n l√Ω ng∆∞·ªùi d√πng")

        user_canvas = tk.Canvas(users_frame, bg="white")
        user_scrollbar = ttk.Scrollbar(users_frame, orient="vertical", command=user_canvas.yview)
        scrollable_user_frame = ttk.Frame(user_canvas)

        scrollable_user_frame.bind("<Configure>", lambda e: user_canvas.configure(scrollregion=user_canvas.bbox("all")))
        user_canvas.create_window((0, 0), window=scrollable_user_frame, anchor="nw")
        user_canvas.configure(yscrollcommand=user_scrollbar.set)

        user_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        user_scrollbar.pack(side=tk.RIGHT, fill="y")

        # D√≤ng ti√™u ƒë·ªÅ
        header = ttk.Frame(scrollable_user_frame, padding=5)
        header.pack(fill=tk.X, pady=(0, 5))
        ttk.Label(header, text="Username", width=20).pack(side=tk.LEFT, padx=5)
        ttk.Label(header, text="Role", width=10).pack(side=tk.LEFT, padx=5)
        ttk.Label(header, text="Actions", width=20).pack(side=tk.LEFT, padx=5)

        # Danh s√°ch user
        for user in self.users:
            user_row = ttk.Frame(scrollable_user_frame, padding=5)
            user_row.pack(fill=tk.X, pady=2)

            ttk.Label(user_row, text=user["username"], width=20).pack(side=tk.LEFT, padx=5)
            ttk.Label(user_row, text=user["role"], width=10).pack(side=tk.LEFT, padx=5)

            # Ch·ªâ t·∫°o n√∫t cho user th∆∞·ªùng
            if user["role"] != "admin":
                ttk.Button(
                    user_row, text="Kh√≥a/M·ªü kh√≥a",
                    command=lambda u=user: self.toggle_user_lock(u)
                ).pack(side=tk.LEFT, padx=2)

                ttk.Button(
                    user_row, text="X√≥a",
                    command=lambda u=user: self.delete_user(u)
                ).pack(side=tk.LEFT, padx=2)


    def edit_movie(self, movie):
        """S·ª≠a th√¥ng tin phim"""
        edit_window = tk.Toplevel(self.root)
        edit_window.title("S·ª≠a th√¥ng tin phim")
        edit_window.geometry("400x300")
        
        ttk.Label(edit_window, text="Ti√™u ƒë·ªÅ:").pack(pady=5)
        title_entry = ttk.Entry(edit_window, width=40)
        title_entry.insert(0, movie['title'])
        title_entry.pack(pady=5)
        
        ttk.Label(edit_window, text="NƒÉm:").pack(pady=5)
        year_entry = ttk.Entry(edit_window, width=40)
        year_entry.insert(0, movie.get('year', ''))
        year_entry.pack(pady=5)
        
        ttk.Label(edit_window, text="M√¥ t·∫£:").pack(pady=5)
        desc_text = tk.Text(edit_window, width=40, height=5)
        desc_text.insert('1.0', movie.get('description', ''))
        desc_text.pack(pady=5)
        
        def save_changes():
            movie['title'] = title_entry.get()
            movie['year'] = year_entry.get()
            movie['description'] = desc_text.get('1.0', 'end-1c')
            self.save_data()
            self.create_admin_gui()  # Refresh admin interface
            edit_window.destroy()
            messagebox.showinfo("Success", "Movie information updated successfully!")
        
        ttk.Button(edit_window, text="L∆∞u", command=save_changes).pack(pady=10)
    
    def delete_movie(self, movie):
        """X√≥a phim"""
        if messagebox.askyesno("Confirm", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a phim '{movie['title']}'?"):
            self.movies.remove(movie)
            self.save_data()
            self.create_admin_gui()  # Refresh admin interface
            messagebox.showinfo("Success", "Movie deleted successfully!")
    
    def toggle_user_lock(self, user):
        """Kh√≥a/M·ªü kh√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng"""
        user['is_locked'] = not user.get('is_locked', False)
        self.save_data()
        self.create_admin_gui()  # Refresh admin interface
        status = "locked" if user['is_locked'] else "unlocked"
        messagebox.showinfo("Success", f"User {user['username']} has been {status}!")
    
    def delete_user(self, user):
        """X√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng"""
        if messagebox.askyesno("Confirm", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n '{user['username']}'?"):
            self.users.remove(user)
            self.save_data()
            self.create_admin_gui()  # Refresh admin interface
            messagebox.showinfo("Success", "User deleted successfully!")



if __name__ == "__main__":
    root = tk.Tk()
    app = MovieApp(root)
    root.mainloop()
